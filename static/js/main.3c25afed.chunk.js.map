{"version":3,"sources":["images/logo-wrench-white.png","components/MemoryCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","innerClass","this","props","isFlipped","className","onClick","pickCard","src","logo","alt","symbol","Component","generateDeck","symbols","deck","i","push","a","length","j","Math","floor","random","shuffle","App","state","pickedCards","cardIndex","cardToFlip","newPickedCards","concat","newDeck","map","card","index","card1Index","card2Index","setTimeout","unflipCards","setState","card1","card2","console","log","cardsJSX","key","bind","slice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3c25afed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-wrench-white.f2d91aa6.png\";","import React, { Component } from 'react'\n\nimport './MemoryCard.css';\n\nimport logo from '../images/logo-wrench-white.png';\n\nclass Card extends Component {\n  render() {\n    let innerClass = \"MemoryCard__inner\";\n    if (this.props.isFlipped) {\n      innerClass += ' flipped';\n    }\n    return (\n      <div className=\"MemoryCard\" onClick={this.props.pickCard}>\n        <div className={innerClass}>\n          <div className=\"MemoryCard__back\">\n            <img src={logo} alt=\"DigitalCrafts Logo\" />\n          </div>\n          <div className=\"MemoryCard__front\">\n            {this.props.symbol}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport MemoryCard from './components/MemoryCard.js';\nimport './App.css';\n\n// Helper function that can generate a deck of memory cards\n// This is basic JS function that returns an array of cards\nfunction generateDeck() {\n  var symbols = ['∆', 'ß', '£', '§', '•', '$', '+', 'ø']\n  var deck = []\n  // For loop that will loop 16 times\n  for (let i=0; i<16; i++) { \n    deck.push({\n      isFlipped: false,\n      symbol: symbols[i%8]\n    })\n  }\n  return shuffle(deck);\n}\n\n// ES6 shuffle function from stackoverflow copied after generateDeck function\nfunction shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\n// functional component turned into a class component\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      // Make the deck property point to a call to generateDeck()\n      deck: generateDeck(),\n      pickedCards: []\n    }\n  }\n  pickCard(cardIndex) {\n    // This checks if the card we're trying to pick is already flipped\n    if (this.state.deck[cardIndex].isFlipped) {\n      return;\n    }\n\n    // This creates a copy of the card in the state's deck array at the position of cardIndex\n    var cardToFlip={...this.state.deck[cardIndex]};\n    cardToFlip.isFlipped = true;\n\n    // concat returns a brand new array with all the old contents but it also inserts cardIndex\n    var newPickedCards=this.state.pickedCards.concat(cardIndex);\n    \n    var newDeck = this.state.deck.map((card, index) => {\n      if (cardIndex === index) {\n        return cardToFlip\n      }\n      return card\n    })\n\n    if (newPickedCards.length === 2) {\n      var card1Index=newPickedCards[0]\n      var card2Index=newPickedCards[1]\n      if (newDeck[card1Index].symbol !== newDeck[card2Index].symbol) {\n        setTimeout(() => {\n          this.unflipCards(card1Index, card2Index)\n        }, 1000);\n      }\n      newPickedCards = [];\n    }\n\n    this.setState(\n      {deck: newDeck, pickedCards: newPickedCards}\n    )\n  }\n  \n  unflipCards(card1Index, card2Index) {\n    var card1={...this.state.deck[card1Index]}\n    var card2={...this.state.deck[card2Index]}\n    card1.isFlipped = false\n    card2.isFlipped = false\n\n    var newDeck = this.state.deck.map((card, index) => {\n      if (card1Index === index) {\n        return card1\n      }\n      if (card2Index === index) {\n        return card2\n      }\n      return card\n    })\n    this.setState(\n      {deck: newDeck}\n    )\n  }\n\n  render() {\n    console.log(this.state)\n    var cardsJSX = this.state.deck.map((card, index) => {\n      return <MemoryCard\n        // Add  two props to the <MemoryCard /> component inside return statement\n        symbol={card.symbol}\n        isFlipped={card.isFlipped}\n        // Add key prop\n        key={index}\n        // Add another prop pickCard\n        pickCard={this.pickCard.bind(this, index)}\n      />\n    });\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Memory Game</h1>\n          <p className=\"Subtitle\">Match cards to win</p>\n        </header>\n        <div className=\"Body\">\n          <div>{cardsJSX.slice(0,4)}</div>\n          <div>{cardsJSX.slice(4,8)}</div>\n          <div>{cardsJSX.slice(8,12)}</div>\n          <div>{cardsJSX.slice(12,16)}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}